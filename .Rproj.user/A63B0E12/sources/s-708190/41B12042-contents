---
title: "Assess estimation approaches using Monte Carlo"
output: html_notebook
---

This notebook compares the performance of two different approaches to estimating seroprevalance given data from an imperfect test administered to a convenience sample. 

If you are just looking to find code to copy and adapt, I suggest you look at the R notebook "Estimate seroprevalence" instead. 

Nearly all of the code to generate the simulated data is from the R vignette [MRP with rstanarm](https://cran.r-project.org/web/packages/rstanarm/vignettes/mrp.html) by Lauren Kennedy and Jonah Gabry. (Reproduced with their permission.)  Much of the Stan MRP code borrows from the code in the user guide.

```{r setup, message=FALSE}
library(tidyverse); library(rstan); library(glue); library(epiR)
path <- "C:/Users/dougj/Documents/code/sero_prevalence2"
source(file.path(path, "simulate_mrp_data_w_noise_random.R"))
```


```{r}
NQ <- 20
varnames <- c("pt_sample_true", "pt_sample_posterior", "pt_pop_true", "pt_pop_posterior", "pt_rank_stat", "pa_sample_true", "pa_sample_posterior", "se", "se_posterior", "sp", "sp_posterior", "pt_hat", "pt_hat_se", "pt_simple", "pt_simple_se")

mc_results <- as.data.frame(array(NA, c(NQ, length(varnames))))
names(mc_results) <- varnames
for (q in 1:NQ) {

sero_sim <- simulate_mrp_data(n=1000)
sample <- sero_sim[['sample']]
poststrat <- sero_sim[['poststrat']]
true_popn <- sero_sim[['true_popn']]

# Data from evaluation of antibody test on samples with disease and negative controls 
tp <- 90  # true positives - disease samples with correct test output
fn <- 10  # false negatives - disease samples with incorrect test output
tn <- 95  # true negatives - negative controls with correct test output
fp <- 5   # false positives - negative controls with incorrect test output

#set.seed(8675309)
se <- rbeta(1, tp, fn)
sp <- rbeta(1, tn, fp)
glue("Sensivity: {round(se, 2)}")
mc_results$se[q] <- se
glue("Specificity: {round(sp, 2)}")
mc_results$sp[q] <- sp

# Create binary vectors for whether the antibody test would give the correct result
# (Creating two vectors saves time because the assignment can then be easily vectorized)
pos_correct <- rbinom(n = 1000, size = 1, prob = se)
neg_correct <- rbinom(n = 1000, size = 1, prob = sp)

sample$test <- sample$cat_pref*pos_correct+(1-sample$cat_pref)*(1-neg_correct)


mc_results$pa_sample_true[q] <- mean(sample$test)
mc_results$pt_sample_true[q] <- mean(sample$cat_pref)

glue("Specificity: {round(sp, 2)}")

# Calculate the true population prevalence
true_popn_pref <- sum(true_popn$cat_pref * poststrat$N) / sum(poststrat$N)
glue("True prevalance: {round(true_popn_pref, 3)}")

mc_results$pt_pop_true[q] <- true_popn_pref

# Fit the modified MRP model to the data
# Create a new variable that is 1+male since Stan expects sex to be {1,2}^N
poststrat$sex <- poststrat$male+1
ps_reordered <- poststrat[c('sex', 'age', 'income', 'state', 'eth', 'N')] %>% 
  arrange(eth, state, income, age, sex)

# Create an array using contents of ps_reordered to pass to Stan
P <- array(data = ps_reordered$N, 
             dim=head(as.numeric(lapply(ps_reordered, function(x) length(unique(x)))),-1), 
             dimnames=lapply(ps_reordered[,1:(length(ps_reordered)-1)], unique))

# check that P was assigned correctly by looking at the value of N for a random row
dim(P)
P[1, 3, 2, 45, 2]
ps_reordered %>% filter((sex == 1) & (age == 3) & (income == 2) & (state == 45) & (eth == 2))

# Gather the data in a list
mmrp_data <-  list(N = nrow(sample),
                   ng_age = length(unique(ps_reordered$age)),
                   ng_income = length(unique(ps_reordered$income)),
                   ng_state = length(unique(ps_reordered$state)),
                   ng_eth = length(unique(ps_reordered$eth)),
                   sex = sample$male+1,
                   age = sample$age,
                   income = sample$income,
                   eth = sample$eth,
                   state = sample$state, 
                   y = sample$cat_pref,
                   P = P,
                   tp = tp,  
                   fn = fn,
                   tn = tn,
                   fp = fp)


mmrp_fit <- stan(
  file = file.path(path, "mrp_with_uncertainty.stan"),
  data = mmrp_data, 
  iter = 1000, chains = 3
  )

# Inspect Stan output and compare to the true population figures and the unweighted sample figures.
mmrp_draws <- extract(mmrp_fit)

mc_results$se_posterior[q] <- mean(mmrp_draws$se)

mc_results$sp_posterior[q] <- mean(mmrp_draws$sp)

mc_results$pt_pop_posterior[q] <- mean(mmrp_draws$phi)

mc_results$pa_sample_posterior[q] <- mean(rowMeans(mmrp_draws$pa))

mc_results$pt_sample_posterior[q] <- mean(rowMeans(mmrp_draws$pt))

mc_results$pt_rank_stat[q] <- mean(mmrp_draws$phi > true_popn_pref)

# Generate estimates using the ad hoc, strata based procedure. Since there are too many strata if we include state and age, drop those variables.

# collapse the sample and poststrat data on state
sample_collapsed <- sample %>% 
  group_by(male, eth, income) %>% 
  summarize(pt_total = sum(cat_pref), pa_total = sum(test), n = n())

poststrat_collapsed <- poststrat %>% 
  group_by(male, eth, income) %>% 
  summarize(N = sum(N))

# merge with poststrat collapsed -- note that there are 
res <- sample_collapsed %>% left_join(poststrat_collapsed, by = c("male", "eth", "income"), keep.all = TRUE)


# Add columns for the output from epi.prev
res <- res %>% mutate(prev = NA, lower = NA, upper= NA)

# For each strata, calculate the prevalence and confidence interval.
# I used a level of 68% since that should roughly correspond to a width of 2 standard deviations
for (i in 1:nrow(res)) {
  temp <- epi.prev(res$pa_total[i], res$n[i], 
         se = tp/(tp+fn), sp=tn/(tn+fp),  conf.level=.68, method = "c-p", units =1 )
  res$prev[i] <- temp$tp$est
  res$lower[i] <- temp$tp$lower
  res$upper[i] <- temp$tp$upper
}

# Calculate the weighted mean and variance
NT <- sum(res$N)
res <- res %>% mutate(y = N*prev/NT, s=(upper-lower)/2, v=((s*N/NT)^2)/n )

pt_hat <- sum(res$y)
pt_hat_se=sum(res$v)^.5

mc_results$pt_hat[q] <- pt_hat
mc_results$pt_hat_se[q] <- pt_hat_se

# calculate pt_simple -- the really simple estimate of pt
NT <- sum(res$N)
pa_simple <- sum(res$pa_total*res$N*(1/res$n))/NT
se_hat <-  tp/(tp+fn)
sp_hat <- tn/(tn+fp)
mc_results$pt_simple[q] <- (pa_simple+sp_hat-1)/(se_hat+sp_hat-1)
write_csv(poststrat, file.path(path, paste("mcr1", Sys.Date(), ".csv")))
}
```

